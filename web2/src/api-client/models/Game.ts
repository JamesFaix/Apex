/* tslint:disable */
/* eslint-disable */
/**
 * Apex API
 * API for Apex
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CreationSource,
    CreationSourceFromJSON,
    CreationSourceFromJSONTyped,
    CreationSourceToJSON,
    GameParameters,
    GameParametersFromJSON,
    GameParametersFromJSONTyped,
    GameParametersToJSON,
    GameStatus,
    GameStatusFromJSON,
    GameStatusFromJSONTyped,
    GameStatusToJSON,
    Piece,
    PieceFromJSON,
    PieceFromJSONTyped,
    PieceToJSON,
    Player,
    PlayerFromJSON,
    PlayerFromJSONTyped,
    PlayerToJSON,
    TurnFSharpOption,
    TurnFSharpOptionFromJSON,
    TurnFSharpOptionFromJSONTyped,
    TurnFSharpOptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    readonly id?: number;
    /**
     * 
     * @type {CreationSource}
     * @memberof Game
     */
    createdBy?: CreationSource;
    /**
     * 
     * @type {GameParameters}
     * @memberof Game
     */
    parameters?: GameParameters;
    /**
     * 
     * @type {GameStatus}
     * @memberof Game
     */
    status?: GameStatus;
    /**
     * 
     * @type {Array<Player>}
     * @memberof Game
     */
    readonly players?: Array<Player> | null;
    /**
     * 
     * @type {Array<Piece>}
     * @memberof Game
     */
    readonly pieces?: Array<Piece> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Game
     */
    readonly turnCycle?: Array<number> | null;
    /**
     * 
     * @type {TurnFSharpOption}
     * @memberof Game
     */
    currentTurn?: TurnFSharpOption;
}

export function GameFromJSON(json: any): Game {
    return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Game {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdBy': !exists(json, 'createdBy') ? undefined : CreationSourceFromJSON(json['createdBy']),
        'parameters': !exists(json, 'parameters') ? undefined : GameParametersFromJSON(json['parameters']),
        'status': !exists(json, 'status') ? undefined : GameStatusFromJSON(json['status']),
        'players': !exists(json, 'players') ? undefined : (json['players'] === null ? null : (json['players'] as Array<any>).map(PlayerFromJSON)),
        'pieces': !exists(json, 'pieces') ? undefined : (json['pieces'] === null ? null : (json['pieces'] as Array<any>).map(PieceFromJSON)),
        'turnCycle': !exists(json, 'turnCycle') ? undefined : json['turnCycle'],
        'currentTurn': !exists(json, 'currentTurn') ? undefined : TurnFSharpOptionFromJSON(json['currentTurn']),
    };
}

export function GameToJSON(value?: Game | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdBy': CreationSourceToJSON(value.createdBy),
        'parameters': GameParametersToJSON(value.parameters),
        'status': GameStatusToJSON(value.status),
        'currentTurn': TurnFSharpOptionToJSON(value.currentTurn),
    };
}


