/* tslint:disable */
/* eslint-disable */
/**
 * Apex API
 * API for Apex
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StateAndEventResponseDto,
    StateAndEventResponseDtoFromJSON,
    StateAndEventResponseDtoToJSON,
} from '../models';

export interface ApiGamesGameIdCurrentTurnCommitRequestPostRequest {
    gameId: number;
}

export interface ApiGamesGameIdCurrentTurnResetRequestPostRequest {
    gameId: number;
}

export interface ApiGamesGameIdCurrentTurnSelectionRequestCellIdPostRequest {
    gameId: number;
    cellId: number;
}

/**
 * 
 */
export class TurnApi extends runtime.BaseAPI {

    /**
     */
    async apiGamesGameIdCurrentTurnCommitRequestPostRaw(requestParameters: ApiGamesGameIdCurrentTurnCommitRequestPostRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdCurrentTurnCommitRequestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/current-turn/commit-request`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdCurrentTurnCommitRequestPost(requestParameters: ApiGamesGameIdCurrentTurnCommitRequestPostRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdCurrentTurnCommitRequestPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdCurrentTurnResetRequestPostRaw(requestParameters: ApiGamesGameIdCurrentTurnResetRequestPostRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdCurrentTurnResetRequestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/current-turn/reset-request`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdCurrentTurnResetRequestPost(requestParameters: ApiGamesGameIdCurrentTurnResetRequestPostRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdCurrentTurnResetRequestPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdCurrentTurnSelectionRequestCellIdPostRaw(requestParameters: ApiGamesGameIdCurrentTurnSelectionRequestCellIdPostRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdCurrentTurnSelectionRequestCellIdPost.');
        }

        if (requestParameters.cellId === null || requestParameters.cellId === undefined) {
            throw new runtime.RequiredError('cellId','Required parameter requestParameters.cellId was null or undefined when calling apiGamesGameIdCurrentTurnSelectionRequestCellIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/current-turn/selection-request/{cellId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))).replace(`{${"cellId"}}`, encodeURIComponent(String(requestParameters.cellId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdCurrentTurnSelectionRequestCellIdPost(requestParameters: ApiGamesGameIdCurrentTurnSelectionRequestCellIdPostRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdCurrentTurnSelectionRequestCellIdPostRaw(requestParameters);
        return await response.value();
    }

}
