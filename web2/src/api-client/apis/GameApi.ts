/* tslint:disable */
/* eslint-disable */
/**
 * Djambi-N API
 * API for Djambi-N
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GameDto,
    GameDtoFromJSON,
    GameDtoToJSON,
    GameParametersDto,
    GameParametersDtoFromJSON,
    GameParametersDtoToJSON,
    StateAndEventResponseDto,
    StateAndEventResponseDtoFromJSON,
    StateAndEventResponseDtoToJSON,
} from '../models';

export interface ApiGamesGameIdGetRequest {
    gameId: number;
}

export interface ApiGamesGameIdParametersPutRequest {
    gameId: number;
    gameParametersDto?: GameParametersDto;
}

export interface ApiGamesGameIdStartRequestPostRequest {
    gameId: number;
}

export interface ApiGamesPostRequest {
    gameParametersDto?: GameParametersDto;
}

/**
 * 
 */
export class GameApi extends runtime.BaseAPI {

    /**
     */
    async apiGamesGameIdGetRaw(requestParameters: ApiGamesGameIdGetRequest): Promise<runtime.ApiResponse<GameDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GameDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdGet(requestParameters: ApiGamesGameIdGetRequest): Promise<GameDto> {
        const response = await this.apiGamesGameIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdParametersPutRaw(requestParameters: ApiGamesGameIdParametersPutRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdParametersPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/games/{gameId}/parameters`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GameParametersDtoToJSON(requestParameters.gameParametersDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdParametersPut(requestParameters: ApiGamesGameIdParametersPutRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdParametersPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdStartRequestPostRaw(requestParameters: ApiGamesGameIdStartRequestPostRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdStartRequestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/start-request`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdStartRequestPost(requestParameters: ApiGamesGameIdStartRequestPostRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdStartRequestPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesPostRaw(requestParameters: ApiGamesPostRequest): Promise<runtime.ApiResponse<GameDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameParametersDtoToJSON(requestParameters.gameParametersDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GameDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesPost(requestParameters: ApiGamesPostRequest): Promise<GameDto> {
        const response = await this.apiGamesPostRaw(requestParameters);
        return await response.value();
    }

}
