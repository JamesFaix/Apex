/* tslint:disable */
/* eslint-disable */
/**
 * Djambi-N API
 * API for Djambi-N
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePlayerRequestDto,
    CreatePlayerRequestDtoFromJSON,
    CreatePlayerRequestDtoToJSON,
    PlayerStatus,
    PlayerStatusFromJSON,
    PlayerStatusToJSON,
    StateAndEventResponseDto,
    StateAndEventResponseDtoFromJSON,
    StateAndEventResponseDtoToJSON,
} from '../models';

export interface ApiGamesGameIdPlayersPlayerIdDeleteRequest {
    gameId: number;
    playerId: number;
}

export interface ApiGamesGameIdPlayersPlayerIdStatusStatusPutRequest {
    gameId: number;
    playerId: number;
    status: PlayerStatus;
}

export interface ApiGamesGameIdPlayersPostRequest {
    gameId: number;
    createPlayerRequestDto?: CreatePlayerRequestDto;
}

/**
 * 
 */
export class PlayerApi extends runtime.BaseAPI {

    /**
     */
    async apiGamesGameIdPlayersPlayerIdDeleteRaw(requestParameters: ApiGamesGameIdPlayersPlayerIdDeleteRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdPlayersPlayerIdDelete.');
        }

        if (requestParameters.playerId === null || requestParameters.playerId === undefined) {
            throw new runtime.RequiredError('playerId','Required parameter requestParameters.playerId was null or undefined when calling apiGamesGameIdPlayersPlayerIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/players/{playerId}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))).replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters.playerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdPlayersPlayerIdDelete(requestParameters: ApiGamesGameIdPlayersPlayerIdDeleteRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdPlayersPlayerIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdPlayersPlayerIdStatusStatusPutRaw(requestParameters: ApiGamesGameIdPlayersPlayerIdStatusStatusPutRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdPlayersPlayerIdStatusStatusPut.');
        }

        if (requestParameters.playerId === null || requestParameters.playerId === undefined) {
            throw new runtime.RequiredError('playerId','Required parameter requestParameters.playerId was null or undefined when calling apiGamesGameIdPlayersPlayerIdStatusStatusPut.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling apiGamesGameIdPlayersPlayerIdStatusStatusPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{gameId}/players/{playerId}/status/{status}`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))).replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters.playerId))).replace(`{${"status"}}`, encodeURIComponent(String(requestParameters.status))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdPlayersPlayerIdStatusStatusPut(requestParameters: ApiGamesGameIdPlayersPlayerIdStatusStatusPutRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdPlayersPlayerIdStatusStatusPutRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiGamesGameIdPlayersPostRaw(requestParameters: ApiGamesGameIdPlayersPostRequest): Promise<runtime.ApiResponse<StateAndEventResponseDto>> {
        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling apiGamesGameIdPlayersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/games/{gameId}/players`.replace(`{${"gameId"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlayerRequestDtoToJSON(requestParameters.createPlayerRequestDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StateAndEventResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiGamesGameIdPlayersPost(requestParameters: ApiGamesGameIdPlayersPostRequest): Promise<StateAndEventResponseDto> {
        const response = await this.apiGamesGameIdPlayersPostRaw(requestParameters);
        return await response.value();
    }

}
