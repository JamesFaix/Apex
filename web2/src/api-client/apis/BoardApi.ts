/* tslint:disable */
/* eslint-disable */
/**
 * Apex API
 * API for Apex
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BoardDto,
    BoardDtoFromJSON,
    BoardDtoToJSON,
} from '../models';

export interface ApiBoardsRegionCountCellsCellIdGetRequest {
    regionCount: number;
    cellId: number;
}

export interface ApiBoardsRegionCountGetRequest {
    regionCount: number;
}

/**
 * 
 */
export class BoardApi extends runtime.BaseAPI {

    /**
     */
    async apiBoardsRegionCountCellsCellIdGetRaw(requestParameters: ApiBoardsRegionCountCellsCellIdGetRequest): Promise<runtime.ApiResponse<Array<Array<number>>>> {
        if (requestParameters.regionCount === null || requestParameters.regionCount === undefined) {
            throw new runtime.RequiredError('regionCount','Required parameter requestParameters.regionCount was null or undefined when calling apiBoardsRegionCountCellsCellIdGet.');
        }

        if (requestParameters.cellId === null || requestParameters.cellId === undefined) {
            throw new runtime.RequiredError('cellId','Required parameter requestParameters.cellId was null or undefined when calling apiBoardsRegionCountCellsCellIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/boards/{regionCount}/cells/{cellId}`.replace(`{${"regionCount"}}`, encodeURIComponent(String(requestParameters.regionCount))).replace(`{${"cellId"}}`, encodeURIComponent(String(requestParameters.cellId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiBoardsRegionCountCellsCellIdGet(requestParameters: ApiBoardsRegionCountCellsCellIdGetRequest): Promise<Array<Array<number>>> {
        const response = await this.apiBoardsRegionCountCellsCellIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the board with the given region count.
     */
    async apiBoardsRegionCountGetRaw(requestParameters: ApiBoardsRegionCountGetRequest): Promise<runtime.ApiResponse<BoardDto>> {
        if (requestParameters.regionCount === null || requestParameters.regionCount === undefined) {
            throw new runtime.RequiredError('regionCount','Required parameter requestParameters.regionCount was null or undefined when calling apiBoardsRegionCountGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/boards/{regionCount}`.replace(`{${"regionCount"}}`, encodeURIComponent(String(requestParameters.regionCount))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardDtoFromJSON(jsonValue));
    }

    /**
     * Gets the board with the given region count.
     */
    async apiBoardsRegionCountGet(requestParameters: ApiBoardsRegionCountGetRequest): Promise<BoardDto> {
        const response = await this.apiBoardsRegionCountGetRaw(requestParameters);
        return await response.value();
    }

}
